<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
					"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.casc.sczd.mapper.UserMapper">


	<!-- XML 中的 select 标签的 id 属性值和定义的接口方法名是一样的 ,MyBatis就是通过这种方式将接口方法和 XML 中定义的
		SQL 语句关联到一起的 -->
	<resultMap id="userMap" type="com.casc.sczd.bean.SysUser">
		<id property="id" column="id" />
		<result property="userName" column="user_name" />
		<result property="userPassword" column="user_password" />
		<result property="userEmail" column="user_email" />
		<result property="userInfo" column="user_info" />
		<result property="headImg" column="head_img" jdbcType="BLOB" />
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP" />
	</resultMap>

	<!-- 用于配置一对一映射 -->
	<resultMap id="userRoleMap" extends="userMap"
			   type="com.casc.sczd.bean.SysUser">
		<association property="role" columnPrefix="role_"
					 resultMap="com.casc.sczd.mapper.RoleMapper.roleMap" />
	</resultMap>

	<!-- 用于配置一对一映射 另一种方式，懒加载 -->
	<resultMap id="userRoleMapSelect" extends="userMap"
			   type="com.casc.sczd.bean.SysUser">
		<association property="role" fetchType="lazy"
					 select="com.casc.sczd.mapper.RoleMapper.selectRoleById" column="{id=role_id}" />
	</resultMap>

	<!-- 用于配置多对多映射  -->
	<resultMap id="userRoleListMap" extends="userMap"
			   type="com.casc.sczd.bean.SysUser">
		<collection property="roleList"
					select="com.casc.sczd.mapper.RoleMapper.getRolesByUserId"
					column="{userid=id}"/>
	</resultMap>



	<!-- 保存單挑記錄sql,返回的值是主键,要求数据库支持主键自增长 -->
	<insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
                    user_name,
                    user_password,
                    user_email,
                    user_info,
                    head_img,
                    create_time
                )
        values(
                    #{userName},
                    #{userPassword},
                    #{userEmail},
                    #{userInfo},
                    #{headImg},
                    #{createTime}
        		)
    </insert>


	<!-- 根據ID跟新單條記錄 -->
	<update id="update">
		update sys_user
		<set>
			<if test="id != null">
				id=#{id},
			</if>
			<if test="userName != null">
				user_name=#{userName},
			</if>
			<if test="userPassword != null">
				user_password=#{userPassword},
			</if>
			<if test="userEmail != null">
				user_email=#{userEmail},
			</if>
			<if test="userInfo != null">
				user_info=#{userInfo},
			</if>
			<if test="headImg != null">
				head_img=#{headImg},
			</if>
			<if test="createTime != null">
				create_time=#{createTime},
			</if>
		</set>
		where id = #{id}
	</update>
	<delete id="deleteByIds">
		delete from sys_user where id in
		<foreach collection="idList" open="(" close=")" separator=","
				 item="id" index="i">
			#{id}
		</foreach>
	</delete>
	<select id="getById" resultMap="userMap" >
		select * from sys_user where
		id = #{id}
	</select>
	<select id="getAll" resultType="com.casc.sczd.bean.SysUser">
		select *
		from sys_user
	</select>
	<select id="getByUserName" resultMap="userMap" >
		select * from sys_user where
		user_name = #{userName}
	</select>
	<select id="getByUsernameAndPwd" resultMap="userMap" >
		select * from sys_user where
		user_name = #{userName} and user_password=#{password}
	</select>
	<select id="getRolesAndPrivilegesByUser" resultMap="userRoleListMap" >
	  select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time
		from sys_user u
		where u.id = #{userid}

	</select>
	<select id="getRolesAndPrivilegesByUsername" resultMap="userRoleListMap" >
	  select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time
		from sys_user u
		where u.user_name = #{username}

	</select>















	<select id="selectById" resultMap="userMap" >
		select * from sys_user where
		id = #{id}
	</select>

	<!-- 如果使用 result Type 来设置返回结果的类型，需要在 SQL 中为所有列名和属性名不一致的列设置别名，通过设置别名使最终的查询结果列和
		resultType 指定对象 的属性名保持一致，进而实现自动映射。 -->
	<select id="selectAll" resultType="com.casc.sczd.bean.SysUser">
		select id,
		user_name userName,
		user_password userPassword,
		user_email userEmail,
		user_info userInfo,
		head_img headImg,
		create_time createTime
		from sys_user
	</select>

	<select id="selectRolesByUserId" resultType="com.casc.sczd.bean.SysRole">
		select
		r.id,
		r.role_name roleName,
		r.enabled,
		r.create_by createBy,
		r.create_time createTime,
		u.user_name as "user.userName",
		u.user_email as "user.userEmail",
		u.id as "user.id"
		from sys_user u
		inner join sys_user_role ur on u.id
		= ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId}
	</select>

	<!-- 返回的值是操作所影响的行数 -->
	<insert id="insert">
		insert into sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time)
		values(
		#{userName}, #{userPassword}, #{userEmail},
		#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>

	<!-- 返回的值是主键,要求数据库支持主键自增长 -->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
		user_name, user_password,
		<if test="userEmail != null">
			<if test="userEmail != ''">
				user_email,
			</if>
		</if>
		user_info, head_img, create_time)
		values(
		#{userName}, #{userPassword},
		<if test="userEmail != null">
			<if test="userEmail != ''">
				#{userEmail},
			</if>
		</if>
		#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime,
		jdbcType=TIMESTAMP})
	</insert>



	<!-- 返回的值是主键,这种方式既支持支持主键自增的数据库又支持不支持主键自增的数据库，mysql支持主键自增，oracle不支持 -->
	<insert id="insert3">
		<selectKey keyColumn="id" resultType="long" keyProperty="id"
				   order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time)
		values(
		#{userName}, #{userPassword}, #{userEmail},
		#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})

		<!-- order属性的设置和使用的数据库有关 。在 MySQL 数据库中， order属性设置的值是 AFTER，因为当前记录的主键值在
			insert语句执行成功后才能获取到 。 而在 Oracle 数据库中， order 的值要设置为 BEFORE ，这是因为 Oracle中需要先从序列获取值，然后将值作为主键插入到数据库中
			。 -->
	</insert>


	<update id="updateById">
		update sys_user
		set user_name = #{userName},
		user_password = #{userPassword},
		user_email = #{userEmail},
		user_info = #{userInfo},
		head_img = #{headImg, jdbcType=BLOB},
		create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>

	<delete id="deleteById">
		delete from sys_user where id = #{id}
	</delete>

	<select id="selectRolesByUserIdAndRoleEnabled" resultType="com.casc.sczd.bean.SysRole">
		select
		r.id,
		r.role_name roleName,
		r.enabled,
		r.create_by createBy,
		r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id =
		ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId} and r.enabled = #{enabled}
	</select>

	<select id="selectRolesByUserAndRole" resultType="com.casc.sczd.bean.SysRole">
		select
		r.id,
		r.role_name roleName,
		r.enabled,
		r.create_by createBy,
		r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id =
		ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{user.userId} and r.enabled = #{role.enabled}
	</select>

	<select id="selectByUser" resultType="com.casc.sczd.bean.SysUser">
		select id,
		user_name userName,
		user_password userPassword,
		user_email userEmail,
		user_info userInfo,
		head_img headImg,
		create_time createTime
		from sys_user
		<where>
			<if test="@com.casc.sczd.util.StringUtil@isNotEmpty(userName)">
				and user_name like #{userName}
			</if>
			<if test="userEmail != '' and userEmail != null">
				and user_email = #{userEmail}
			</if>



		</where>
	</select>


	<update id="updateByIdSelective">
		update sys_user
		<set>
			<if test="userName != null and userName != ''">
				user_name = #{userName},
			</if>
			<if test="userPassword != null and userPassword != ''">
				user_password = #{userPassword},
			</if>
			<if test="userEmail != null and userEmail != ''">
				user_email = #{userEmail},
			</if>
			<if test="userInfo != null and userInfo != ''">
				user_info = #{userInfo},
			</if>
			<if test="headImg != null">
				head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test="createTime != null">
				create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id},
		</set>
		where id = #{id}
	</update>




	<select id="selectByIdOrUserName" resultType="com.casc.sczd.bean.SysUser">
		select id,
		user_name userName,
		user_password userPassword,
		user_email userEmail,
		user_info userInfo,
		head_img headImg,
		create_time createTime
		from sys_user
		where 1 = 1
		<choose>
			<when test="id != null">
				and id = #{id}
			</when>
			<when test="userName != null and userName != ''">
				and user_name = #{userName}
			</when>
			<otherwise>
				limit 0
			</otherwise>
		</choose>
	</select>


	<select id="selectByIdList" resultType="com.casc.sczd.bean.SysUser">
		select id,
		user_name userName,
		user_password userPassword,
		user_email userEmail,
		user_info userInfo,
		head_img headImg,
		create_time createTime
		from sys_user
		where id in
		<foreach collection="idList" open="(" close=")" separator=","
				 item="id" index="i">
			#{id}
		</foreach>
	</select>


	<insert id="insertList" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
		user_name, user_password,user_email,
		user_info, head_img, create_time)
		values
		<foreach collection="userList" item="user" separator=",">
			(
			#{user.userName}, #{user.userPassword},#{user.userEmail},
			#{user.userInfo}, #{user.headImg, jdbcType=BLOB}, #{user.createTime,
			jdbcType=TIMESTAMP})
		</foreach>
	</insert>



	<update id="updateByMap">
		update sys_user
		set
		<foreach collection="_parameter" item="val" index="key"
				 separator=",">
			${key} = #{val}
		</foreach>
		where id = #{id}
	</update>



	<select id="selectUserAndRoleById" resultType="com.casc.sczd.bean.SysUser">
		select
		u.id,
		u.user_name userName,
		u.user_password userPassword,
		u.user_email userEmail,
		u.user_info userInfo,
		u.head_img headImg,
		u.create_time createTime,
		r.id "role.id",
		r.role_name "role.roleName",
		r.enabled "role.enabled",
		r.create_by "role.createBy",
		r.create_time "role.createTime"
		from sys_user u
		inner join sys_user_role ur on u.id =
		ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{id}
	</select>

	<select id="selectUserAndRoleById2" resultMap="userRoleMap">
		select
		u.id,
		u.user_name,
		u.user_password,
		u.user_email,
		u.user_info,
		u.head_img,
		u.create_time,
		r.id role_id,
		r.role_name role_role_name,
		r.enabled role_enabled,
		r.create_by role_create_by,
		r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id =
		ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{id}
	</select>

	<select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
		select
		u.id,
		u.user_name,
		u.user_password,
		u.user_email,
		u.user_info,
		u.head_img,
		u.create_time,
		ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		where u.id = #{id}
	</select>


	<select id="selectAllUserAndRoles" resultMap="userRoleListMap">
	    select
	    	u.id,
	    	u.user_name,
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
	        r.id role_id,
			r.role_name role_role_name,
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		inner join sys_role_privilege rp on rp.role_id = r.id
		inner join sys_privilege p on p.id = rp.privilege_id
	</select>



</mapper>